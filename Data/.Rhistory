head(x[,Date])[1]
as.Date(head(x[,Date])[1])
as.Date(head(x[,Date])[1],format = "%d/%m/%y")
as.Date(head(x[,Date])[1],format = "%d//%m//%y")
as.Date(head(x[,Date])[1],format = "%d/%m/%Y")
dt.raw= fread(file,na.strings = "?")
dt.raw[,Date:= as.Date(dt.raw[,Date]),format = "%d/%m/%Y"]
dt.raw[,Date:= as.Date(dt.raw[,Date],format = "%d/%m/%Y")]
head(dt.raw[,Date])
d1= "2007-02-01"
d1= as.date("2007-02-01")
d1= as.Date("2007-02-01")
d1
class(d1)
sapply(dt,class)
dt.1=dt.raw[,Date==dl]
dt.1=dt.raw[,Date==d1]
head(dt.1[,Date])
head(dt.1)
DT <- data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DT
setkey(dt.raw,Date)
dt.1= dt.raw(d1)
dt.1= dt.raw[d1]
d1
setkey(dt.raw,Date)
dt.1= dt.raw[d1]
setkey(DT,x)               # set a 1-column key
DT["b"]
tables()
tables()
rm(dt)
rm(x)
tables()
d1
head(dt1)
head(dt.1)
sum(dt.1)
dt.x= dt.raw[d1]
head(dt.x)
dt.1= dt.raw[,Date==d1]
sum(dt.1)
dt.1= dt.raw[Date %in% c(d1)]
head(dt.1)
d1
c(as.Date("2007-02-01"), as.Date("2007-02-02"))
dt= dt.raw[Date %in% c(as.Date("2007-02-01"), as.Date("2007-02-02"))]
head(dt)
tail(dt)
dt.raw[,Global_active_power:= as.numeric(dt.raw[,Global_active_power])]
dt.raw[,Sub_metering_1:= as.numeric(dt.raw[,Sub_metering_1])]
dt.raw[,Sub_metering_2:= as.numeric(dt.raw[,Sub_metering_2])]
dt.raw[,Sub_metering_3:= as.numeric(dt.raw[,Sub_metering_3])]
setkey(dt.raw,Date)
dt= dt.raw[Date %in% c(as.Date("2007-02-01"), as.Date("2007-02-02"))]
hist(x = dt$Global_active_power)
plot(x = dt$Date,dt$Global_active_power)
library(hflights)
install.packages("hflights")
library(hflights)
library(data.table)
dim(hflights)
str(hflights)
DT &lt
DT &lt;- as.data.table(hflights)
DT <- as.data.table(hflights)
str(DT[Month==10])
library(dplyr)
summarise(DT)
DT1= DT[Month==10,
mean(na.omit(AirTime)),
by=UniqueCarrier]
DT1
length(unique(DT$UniqueCarrier))
unique(DT$UniqueCarrier)
str(DT[2:5])
dim(DT[2:5])
DX= DT[UniqueCarrier== "AA"]
dim(DX); str(DX)
unique(DX$FlightNum)
DX= DT[UniqueCarrier== "AA" & FlightNum==1824]
dim(DX); str(DX)
DI[.N]
DX[.N]
DT[.N]
DX[7:.N]
DX= DT[, mean(na.omit(ArrDelay))]
class(DX)
DX= DT[, mean(na.omit(ArrDelay))]
class(DX)
DX= DT[, .(mean(na.omit(DepDelay)),mean(na.omit(ArrDelay)))]
class(DX)
DC
DX
DX= DT[, .(Avg_DepDelay= mean(na.omit(DepDelay)),
Avg_ArrDelay= mean(na.omit(ArrDelay)))]
class(DX); DX
DT[UniqueCarrier=="AA",                         # this line selects a carrier
.(Avg_DepDelay =mean(na.omit(DepDelay)),     # add average departure delay
Avg_ArrDelay = mean(na.omit(ArrDelay)),    # add average arrival delay
plot(DepTime,DepDelay,ylim=c(-15,200)),    # withing the table definition, plot a graph
abline(h=0))]
DT[UniqueCarrier=="AA",                         # this line selects a carrier
.(Avg_DepDelay =mean(na.omit(DepDelay)),     # add average departure delay
Avg_ArrDelay = mean(na.omit(ArrDelay)),    # add average arrival delay
plot(DepTime,ArrDelay,ylim=c(-15,200)),    # withing the table definition, plot a graph
abline(h=0))]
DT[UniqueCarrier=="AA",                         # this line selects a carrier
.(Avg_DepDelay =mean(na.omit(DepDelay)),     # add average departure delay
Avg_ArrDelay = mean(na.omit(ArrDelay)),    # add average arrival delay
plot(DepDelay,ArrDelay,ylim=c(-15,200)),    # withing the table definition, plot a graph
abline(h=0))]
DT[,mean(na.omit(DepDelay)),by=Origin]
DT[,mean(na.omit(DepDelay)),by=Dest]
DT[,mDepDel= mean(na.omit(DepDelay)),by=Dest]
DT[,.(mDepDel= mean(na.omit(DepDelay))),by=Dest]
DT[,.(mDepDel= mean(na.omit(DepDelay))),by=(Origin,Dest)]
DT[,.(mDepDel= mean(na.omit(DepDelay))),by=.(Origin,Dest)]
DT[,.(mDepDel= mean(na.omit(DepDelay))),by=.(Origin,Dest,Weekdays = DayOfWeek<6)]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation = mean(na.omit(ArrDelay - DepDelay))),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
Weekdays = DayOfWeek<6)
]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation = mean(na.omit(ArrDelay - DepDelay))),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
UniqueCarrier,
Weekdays = DayOfWeek<6)
]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation.val = mean(na.omit(ArrDelay - DepDelay)),
Compensation= if (Compensation.val<=0) "Good" else "Bad"),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
UniqueCarrier,
Weekdays = DayOfWeek<6)
]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation.val = mean(na.omit(ArrDelay - DepDelay)),
Compensation= if (Compensation.val<=0) "Good" else "Bad"),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
UniqueCarrier,
Weekdays = DayOfWeek<6)
]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation.val = mean(na.omit(ArrDelay - DepDelay)),
Compensation= if (mean(na.omit(ArrDelay - DepDelay))<=0) "Good" else "Bad"),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
UniqueCarrier,
Weekdays = DayOfWeek<6)
]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation.val = mean(na.omit(ArrDelay - DepDelay)),
Compensation= if (Compensation.val<=0) "Good" else "Bad"),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
UniqueCarrier,
Weekdays = DayOfWeek<6)
]
DT[
# select flights by Delta Airline only
UniqueCarrier==c("AA", "DL"),
# compute mean arrival and departure delay and compensation
.(Avg_DepDelay = mean(na.omit(DepDelay)),
Avg_ArrDelay = mean(na.omit(ArrDelay)),
Compensation.val = mean(na.omit(ArrDelay - DepDelay)),
Compensation= if (mean(na.omit(ArrDelay - DepDelay))<=0) "Good" else "Bad",
plot(DepDelay,(ArrDelay - DepDelay))),
# use by to express under what conditions the computation should be repeated
by = .(Origin,
UniqueCarrier,
Weekdays = DayOfWeek<6)
]
library()swirl
library(swirl
()
()
(((())))
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
dim(segmentationOriginal)
q1.inTrain= createDataPartition(y = segmentationOriginal$Case,
p = 0.7, list = F)
q1.train= segmentationOriginal[q1.inTrain,]
q1.test= segmentationOriginal[q1.inTrain,]
dim(q1.train)
dim(q1.test)
q1.inTrain= createDataPartition(y = segmentationOriginal$Case,
p = 0.7, list = F)
q1.test= segmentationOriginal[-q1.inTrain,]
q1.train= segmentationOriginal[q1.inTrain,]
dim(q1.test)
dim(q1.train)
605+1414
q1.modFit= train(Case ~ ., method="rpart", data= q1.train)
install.packages("e1071")
q1.modFit= train(Case ~ ., method="rpart", data= q1.train)
print(q1.modFit$finalModel)
seed(125)
setseed(125)
set.seed(125)
q1.modFit= train(Case ~ ., method="rpart", data= q1.train)
print(q1.modFit$finalModel)
dim(q1.inTrain)
head(q1.inTrain)
tail(q1.inTrain)
q1.inTrain= createDataPartition(y = segmentationOriginal$Case,
p = 0.7, list = T)
dim(q1.inTrain)
head(q1.inTrain)
tail(q1.inTrain)
q1.inTrain= createDataPartition(y = segmentationOriginal$Case,
p = 0.7, list = T)
q1.train= segmentationOriginal[q1.inTrain,]
q1.test= segmentationOriginal[-q1.inTrain,]
q1.inTrain= createDataPartition(y = segmentationOriginal$Case,
p = 0.7, list = F)
q1.train= segmentationOriginal[q1.inTrain,]
q1.test= segmentationOriginal[-q1.inTrain,]
set.seed(125)
q1.modFit= train(Case ~ ., method="rpart", data= q1.train)
print(q1.modFit$finalModel)
install.packages("rattle")
library(rattle)
library(rattle)
plot(q1.modFit)
plot(q1.modFit, uniform=TRUE)
plot(q1.modFit$finalModel)
print(q1.modFit$finalModel)
library(caret)
library(rattle)
training <- subset(segmentationData, Case == "Train")
testing <- subset(segmentationData, Case == "Test")
training$Case <- NULL
testing$Case <- NULL
fit.rpart= train(Class~., data = training, method= "rpart")
dg
library(caret)
library(rattle)
data("segmentationData")
training <- subset(segmentationData, Case == "Train")
testing <- subset(segmentationData, Case == "Test")
training$Case <- NULL
testing$Case <- NULL
fit.rpart= train(Class~., data = training, method= "rpart")
fancyRpartPlot(fit.rpart$finalModel)
install.packages("rpart.plot")
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
data("segmentationData")
fit.rpart= train(Class~., data = training, method= "rpart")
fancyRpartPlot(fit.rpart$finalModel)
cvCtrl <- trainControl(method = "repeatedcv", repeats = 3)
fit.rpart.2= train(Class ~ ., data = training, method = "rpart",
tuneLength = 30,
trControl = cvCtrl)
fancyRpartPlot(fit.rpart.2$finalModel)
?caret
cvCtrl <- trainControl(method = "repeatedcv",
number= 20,
repeats = 3)
fit.rpart.2= train(Class ~ ., data = training, method = "rpart",
tuneLength = 30,
trControl = cvCtrl)
fancyRpartPlot(fit.rpart.2$finalModel)
plot.train(fit.rpart)
plot.train(fit.rpart.2)
print.train(fit.rpart.2)
print.train(fit.rpart)
print.train(fit.rpart.2)
predict.rpart= predict(fit.rpart, training)
confusionMatrix(predict.rpart, testing$Class)
predict.rpart= predict(fit.rpart, testing)
confusionMatrix(predict.rpart, testing$Class)
predict.rpart.2= predict(fit.rpart.2, testing)
confusionMatrix(predict.rpart.2, testing$Class)
fit.RWeka= train(Class~., data = training, method= "RWeka")
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
data("segmentationData")
source('~/.active-rstudio-document', echo=TRUE)
fit.RWeka= train(Class~., data = training, method= "party")
install.packages("partykit")
install.packages("party")
fit.RWeka= train(Class~., data = training, method= "party")
fit.RWeka= train(Class~., data = training, method= "partykit")
fit.RWeka= train(Class~., data = training, method= "C50")
rpartProbs <- predict(rpartTune, testing, type = "prob")
head(rpartProbs)
fit.probs <- predict(fit.rpart, testing, type = "prob")
head(fit.probs)
library(pROC)
install.packages("pROC")
library(pROC)
fit.probs$Class
fit.ROC <- roc(testing$Class, fit.probs[, "PS"], levels = rev(fit.probs$Class))
fit.probs[, "PS"]
levels = rev(fit.probs$Class)
levels
rev(fit.probs)
fit.ROC <- roc(testing$Class, fit.probs[, "PS"], levels = rev(fit.probs))
cvCtrl <- trainControl(method = "repeatedcv", repeats = 3, summaryFunction = twoClassSummary, classProbs = TRUE)
set.seed(1)
rpartTune <- train(Class ~ ., data = training, method = "rpart", tuneLength = 30, metric = "ROC", trControl = cvCtrl)
rpartTune
rpartPred2 <- predict(rpartTune, testing)
confusionMatrix(rpartPred2, testing$Class)
rpartProbs <- predict(rpartTune, testing, type = "prob")
head(rpartProbs)
library(pROC)
rpartROC <- roc(testing$Class, rpartProbs[, "PS"], levels = rev(testProbs$Class))
plot(rpartROC, type = "S", print.thres = .5)
rpartROC
?roc
dim(predict.rpart)
length(predict.rpart)
head(predict.rpart)
fit.ROC = roc(predict.rpart,testing$Class)
data(aSAH)
head(aSAH$outcome)
head(aSAH$s100b)
length(fit.probs)
fit.probs <- predict(fit.rpart, testing, type = "prob")
fit.probs <- predict(fit.rpart, testing, type = "prob")
length(fit.probs)
dim(fit.probs)
fit.ROC <- roc(testing$Class, fit.probs[, "PS"])
dim(fit.ROC)
length(fit.ROC)
fit.ROC
plot(rpartROC, type = "S", print.thres = .5)
plot(fit.ROC, type = "S", print.thres = .5)
confusionMatrix(rpartPred2, testing$Class)
plot(rpartROC, print.thres = .5)
plot(fit.ROC, print.thres = .5)
list(string="string", number=1234)
l=list(string="string", number=1234)
l$string
l$number
l=list(string="string", number=1234, array=c5,6,7,8,9,10), factor= as.factor("value"))
l=list(string="string", number=1234, array=c(5,6,7,8,9,10), factor= as.factor("value"))
l$string
l$number
l$array
l$factor
shiny::runApp('C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/Tutorial/Lesson_5')
install.packages("mapproj")
shiny::runApp('C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/Tutorial/Lesson_5')
shiny::runApp('C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/Tutorial/Lesson_5')
shiny::runApp('C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/Tutorial/Lesson_5')
shiny::runApp('C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/Tutorial/Lesson_5')
shiny::runApp('C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/Tutorial/Lesson_5')
install.packages("devtools")
library(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('ramnathv/slidify')
library("stringi", lib.loc="~/R/win-library/3.2")
remove.packages("stringi", lib="~/R/win-library/3.2")
install_github('ramnathv/slidify')
install.packages("httpuv")
require(devtools)
install_github('shiny', 'rstudio')
install_github('shiny-gridster', 'wch')
install_github('dashifyr', 'ramnathv')
require(dashifyr)
demoapp = system.file('demo', package = 'dashifyr')
shiny::runApp(demoapp)
install_github(wch/shiny-jsdemo)
install_github("wch/shiny-jsdemo")
setwd("C:/Users/paolucci/OneDrive/Documents/GitHub/R_Programming/Shiny/dashboards/shinyJsDemo")
shiny::runApp()
shiny::runApp()
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
dim(web_index)
web_index$country
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
install.packages("coin")
remove.packages("rCharts")
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
install_github('ramnathv/rCharts")
"')"
')
)))))
"
install_github('ramnathv/rCharts')
remove.packages("rCharts")
remove.packages("rCharts@dev")
install_github('ramnathv/rCharts')
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
ichoropleth(Crime ~ State, data = subset(violent_crime, Year == 2010))
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year")
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year", play = TRUE)
setwd("C:/Users/paolucci/OneDrive/Documents/GitHub/Coursera/DataScience/DataProducts/Project/Data")
co.co= read.csv("C:/Users/paolucci/OneDrive/Documents/GitHub/Coursera/DataScience/DataProducts/Project/Data/country_codes.csv")
head(co.co)
dim(co.co)
ichoropleth(num~un,data = co.co)
ichoropleth(num~un,data = co.co,map = 'world')
ichoropleth(num~un,data = co.co,map = 'world',labels = F)
co.co= read.csv("C:/Users/paolucci/OneDrive/Documents/GitHub/Coursera/DataScience/DataProducts/Project/Data/country_codes.csv")
ichoropleth(num~un,data = co.co,map = 'world',labels = F,)
head(co.co)
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,)
ichoropleth(Crime ~ State, data = subset(violent_crime, Year == 2010))
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year", play = TRUE)
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year")
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year",n=5,name="red")
library(RColorBrewer)
par(mfrow=c(2,2))
display.brewer.all()
rand.data <- replicate(8,rnorm(100,100,sd=1.5))
boxplot(rand.data,col=brewer.pal(8,"Set3"))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,col=brewer.pal(8,"Set3"))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,col=brewer.pal(8,"Set4"))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,col=brewer.pal(8,"Set3"))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,col=brewer.pal(8,"Set2"))
boxplot(rand.data,col=brewer.pal(8,"Set3"))
br.range <- seq(min(rand.data),max(rand.data),length.out=10)
results <- sapply(1:ncol(rand.data),function(x) hist(rand.data[,x],plot=F,br=br.range)$counts)
plot(x=br.range,ylim=range(results),type="n",ylab="Counts")
cols <- brewer.pal(8,"Set3")
lapply(1:ncol(results),function(x) lines(results[,x],col=cols[x],lwd=3))
table.data <- table(round(rand.data))
cols <- colorRampPalette(brewer.pal(8,"Dark2"))(length(table.data))
pie(table.data,col=cols)
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "reds")
display.brewer.all()
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "Spectral")
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = rev(brewer.pal(5,"BuPu")))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = rev(brewer.pal(5,"Spectral")))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = rev(brewer.pal(3,"Spectral")))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = rev(brewer.pal(1,"Spectral")))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = brewer.pal(5,"Spectral"))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = rev("Spectral"))
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "YIOrRd")
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "YlOrRd")
rSpectral= rev("Spectral")
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "rSpectral")
ichoropleth(NUM~UN,data = co.co,map = 'europe',labels = F,pal = "rSpectral")
ichoropleth(NUM~UN,data = co.co,map = 'europe',labels = F,pal = "Spectral")
ichoropleth(NUM~UN,data = co.co,map = 'us',labels = F,pal = "Spectral")
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "Spectral")
ichoropleth(NUM~UN,data = co.co,map = 'world',labels = F,pal = "YlOrRd")
